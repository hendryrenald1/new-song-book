{"version":3,"sources":["components/AutoCompleteText.js","components/SongList.js","components/SearchPage.js","components/MainPage.js","components/SongDetailsPage.js","components/NavbarPage.js","components/FooterPage.js","App.js","registerServiceWorker.js","index.js"],"names":["React","Component","SongList","this","props","songs","filter","song","search","searchChordedOnly","chorded","searchRecordedOnly","recording","searchTarget","title","English","searchLyrics","lyrics","Tamil","toLowerCase","includes","searchInput","sort","a","b","map","selected","key","_id","className","onClick","selectSong","artist","album","SearchPage","state","display","md","type","name","placeholder","onChange","handleSearchChange","MainPage","clickCount","viewLogin","admin","edit","getSongs","axios","get","then","response","setState","data","catch","error","console","log","history","push","pathname","event","target","value","parameter","token","window","localStorage","getItem","id","SongDetailsPage","location","text","goBack","gradient","rounded","NavbarPage","isOpen","toggleCollapse","dark","expand","to","src","href","height","alt","navbar","right","active","FooterPage","fluid","Date","getFullYear","App","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.8d68f4ac.chunk.js","sourcesContent":["import React from \"react\";\n\nclass AutoCompleteText extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.items = [\"David\", \"Damien\", \"Sara\", \"Jane\"];\n  }\n\n  render() {\n    return (\n      <div>\n        <input type=\"text\" onChange={(e) => console.log(e.target.value)} />\n        <ul>\n          {this.items.map((item) => (\n            <li> {item}</li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default AutoCompleteText;\n","import React from \"react\";\nimport {\n  MDBBtn,\n  MDBCard,\n  MDBCardBody,\n  MDBCardImage,\n  MDBCardTitle,\n  MDBCardText,\n  MDBCol,\n  MDBIcon,\n} from \"mdbreact\";\n\nclass SongList extends React.Component {\n  render() {\n    return this.props.songs\n      .filter((song) => {\n        if (this.props.search.searchChordedOnly && song.chorded === false)\n          return false;\n        if (this.props.search.searchRecordedOnly && song.recording === \"\")\n          return false;\n\n        let searchTarget = song.title.English;\n        if (this.props.search.searchLyrics) searchTarget += song.lyrics;\n        searchTarget += song.title.Tamil;\n        searchTarget = searchTarget.toLowerCase();\n        return searchTarget.includes(this.props.search.searchInput);\n      })\n      .sort((a, b) => (a.title.Tamil > b.title.Tamil ? 1 : -1))\n      .map((song) => {\n        const classes =\n          \"songlink\" + (this.props.selected === song ? \" selectedsong\" : \"\");\n        return (\n          // <li\n          //   className=\"list-group-item text-md-center text-left song-list\"\n          //   key={song._id}\n          //   onClick={() => this.props.selectSong(song)}\n          // >\n          //   {song.title.English}\n          //   {song.title.Tamil}\n          // </li>\n\n          <MDBCard\n            key={song._id}\n            className=\"my-1\"\n            onClick={() => this.props.selectSong(song)}\n          >\n            <MDBCardBody key={song._id}>\n              <MDBCardTitle>{song.title.Tamil}</MDBCardTitle>\n\n              <MDBCardText className=\"font-weight-bold blue-text\">\n                {song.title.English}\n              </MDBCardText>\n              <MDBCardText>\n                <i key={song._id} className=\"mx-1 fas fa-microphone\">\n                  {song.artist}\n                </i>\n                <i className=\"fas fa-record-vinyl\"> </i> {song.album}\n              </MDBCardText>\n            </MDBCardBody>\n          </MDBCard>\n        );\n      });\n  }\n}\n\nexport default SongList;\n","import React from \"react\";\nimport { MDBCol, MDBContainer } from \"mdbreact\";\n\nclass SearchPage extends React.Component {\n  state = { display: \"none\" };\n\n  render() {\n    return (\n      <>\n        <MDBContainer>\n          <MDBCol md=\"12\">\n            <span className=\"d-block p-2 bg-dark\">\n              <input\n                type=\"text\"\n                className=\"form-control form-control-lg \"\n                name=\"searchInput\"\n                placeholder=\"Search Songs....\"\n                onChange={this.props.handleSearchChange}\n              ></input>\n            </span>\n            {/* <input\n              className=\"form-control\"\n              type=\"text\"\n              placeholder=\"Enter the song to search....\"\n              aria-label=\"Search\"\n            \n              onChange={this.props.handleSearchChange}\n            /> */}\n          </MDBCol>\n          {/* <MDBBtn href=\"#\" gradient=\"purple\" rounded>\n        Search\n      </MDBBtn> */}\n        </MDBContainer>\n      </>\n    );\n  }\n}\n\nexport default SearchPage;\n","import React, { Component, Fragment } from \"react\";\n\nimport AutoCompleteText from \"./AutoCompleteText\";\n\nimport \".././index.css\";\nimport axios from \"axios\";\nimport SongList from \"./SongList\";\nimport SearchPage from \"./SearchPage\";\nconst apiUrl = \"/api/songs\";\n\n// const apiUrl = \"https://fcm-song-book-demo.herokuapp.com/api/songs\";\n\nclass MainPage extends Component {\n  state = {\n    songs: [],\n    selected: \"\",\n    search: {\n      searchInput: \"\",\n      searchLyrics: false,\n      searchChordedOnly: false,\n      searchRecordedOnly: false,\n    },\n    clickCount: 0,\n    viewLogin: false,\n    admin: \"\",\n    edit: false,\n  };\n  getSongs = () => {\n    axios\n      .get(apiUrl)\n      .then((response) => this.setState({ songs: response.data }))\n      .catch((error) => console.log(\"error fetching songs from db\"));\n  };\n  selectSong = (song) => {\n    this.props.history.push({\n      pathname: \"/selectedSong\",\n      state: { song: song },\n    });\n  };\n\n  handleSearchChange = (event) => {\n    let search = this.state.search;\n    if (event.target.name === \"searchInput\") {\n      search.searchInput = event.target.value.toLowerCase();\n    } else {\n      const parameter = event.target.name;\n      search[parameter] = !search[parameter];\n    }\n    this.setState({ search });\n  };\n  componentDidMount() {\n    const token = window.localStorage.getItem(\"admin\");\n    if (token) {\n      this.setState({ admin: token });\n    }\n    this.getSongs();\n  }\n  render() {\n    return (\n      <Fragment>\n        <header id=\"home-section\" className=\"img-fluid\">\n          <div className=\"card-overlay\">\n            <div className=\"home-inner container\">\n              <div className=\"row\">\n                <div className=\"col\">\n                  <div className=\"form-group\">\n                    <SearchPage handleSearchChange={this.handleSearchChange} />\n                  </div>\n                </div>\n\n                {/* <MDBContainer size=\"md\" style={{ minHeight: \"100vh\" }}>\n          <JumbotronPage />\n          <SearchPage handleSearchChange={this.handleSearchChange} />\n          <SongList\n            songs={this.state.songs}\n            search={this.state.search}\n            selected={this.state.selected}\n            selectSong={this.selectSong}\n          />\n        </MDBContainer>\n         */}\n              </div>\n            </div>\n          </div>\n        </header>\n\n        <section id=\"song-list\" className=\"container\">\n          <div className=\"row\">\n            <div className=\"col\">\n              <ul className=\"list-group my-4\">\n                <SongList\n                  songs={this.state.songs}\n                  search={this.state.search}\n                  selected={this.state.selected}\n                  selectSong={this.selectSong}\n                />\n              </ul>\n            </div>\n          </div>\n        </section>\n      </Fragment>\n    );\n  }\n}\n\nexport default MainPage;\n","import React from \"react\";\n\nimport {\n  MDBBtn,\n  MDBContainer,\n  MDBRow,\n  MDBCol,\n  MDBCardBody,\n  MDBCard,\n  MDBCardTitle,\n} from \"mdbreact\";\nconst SongDetailsPage = (props) => {\n  //let title = props.location.state.song.title.English;\n  return (\n    <MDBContainer>\n      <MDBRow className=\"mt-4\">\n        <MDBCol className=\"col-sm-6\">\n          <MDBCard>\n            <MDBCardTitle className=\"text-center\">\n              {props.location.state.song.title.Tamil}\n            </MDBCardTitle>\n            <MDBCardBody>\n              <pre>{props.location.state.song.lyrics.Tamil.text}</pre>\n            </MDBCardBody>\n          </MDBCard>\n        </MDBCol>\n\n        <MDBCol className=\"col-sm-6\">\n          <MDBCard>\n            <MDBCardTitle className=\"text-center\">\n              {props.location.state.song.title.English}\n            </MDBCardTitle>\n            <MDBCardBody>\n              <pre>{props.location.state.song.lyrics.English.text}</pre>\n            </MDBCardBody>\n          </MDBCard>\n        </MDBCol>\n\n        <MDBCol className=\"col-sm-12 text-center mt-2\">\n          <MDBBtn onClick={props.history.goBack} gradient=\"purple\" rounded>\n            Back\n          </MDBBtn>\n        </MDBCol>\n      </MDBRow>\n    </MDBContainer>\n  );\n};\n\nexport default SongDetailsPage;\n","import React, { Component } from \"react\";\nimport {\n  MDBNavbar,\n  MDBNavbarBrand,\n  MDBNavbarNav,\n  MDBNavItem,\n  MDBNavLink,\n  MDBNavbarToggler,\n  MDBCollapse,\n} from \"mdbreact\";\nimport { BrowserRouter as Router, Link } from \"react-router-dom\";\n\nclass NavbarPage extends Component {\n  state = {\n    isOpen: false,\n  };\n\n  toggleCollapse = () => {\n    this.setState({ isOpen: !this.state.isOpen });\n  };\n\n  render() {\n    return (\n      <MDBNavbar dark expand=\"md\">\n        <MDBNavbarBrand className=\"m1 p0 mx-1\">\n          <Link to=\"/\">\n            <img\n              src=\"../../img/fcm-weblogo.png\"\n              href=\"#\"\n              className=\"logo-navbar\"\n              height=\"480px\"\n              alt=\" FCM logo\"\n            />\n          </Link>\n          <strong> விசுவாச கானங்கள் </strong>\n        </MDBNavbarBrand>\n        <MDBNavbarToggler onClick={this.toggleCollapse} />\n        <MDBCollapse id=\"navbarCollapse3\" isOpen={this.state.isOpen} navbar>\n          <MDBNavbarNav right>\n            <MDBNavItem active>\n              <MDBNavLink to=\"/\">Home</MDBNavLink>\n            </MDBNavItem>\n            <MDBNavItem>\n              <MDBNavLink to=\"/\">Song List</MDBNavLink>\n            </MDBNavItem>\n            <MDBNavItem>\n              <MDBNavLink to=\"#!\">Contact Us</MDBNavLink>\n            </MDBNavItem>\n          </MDBNavbarNav>\n        </MDBCollapse>\n      </MDBNavbar>\n    );\n  }\n}\n\nexport default NavbarPage;\n","import React from \"react\";\nimport { MDBContainer, MDBFooter } from \"mdbreact\";\n\nconst FooterPage = () => {\n  return (\n    <MDBFooter className=\"font-small  panel-footer sticky-footer\">\n      <div className=\"footer-copyright text-center py-3\">\n        <MDBContainer fluid>\n          &copy; {new Date().getFullYear()} Copyright:{\" \"}\n          <a href=\"https://www.faithchurchministries.co.uk/\"> Faith Church Ministries </a>\n        </MDBContainer>\n      </div>\n    </MDBFooter>\n  );\n};\n\nexport default FooterPage;\n","import React, { Component } from \"react\";\r\n\r\nimport MainPage from \"./components/MainPage\";\r\nimport { Route } from \"react-router-dom\";\r\nimport SongDetailsPage from \"./components/SongDetailsPage\";\r\nimport NavbarPage from \"./components/NavbarPage\";\r\nimport FooterPage from \"./components/FooterPage\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <NavbarPage />\r\n        <Route exact path=\"/\" component={MainPage} />\r\n        <Route exact path=\"/selectedSong\" component={SongDetailsPage} />\r\n        <FooterPage />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (!isLocalhost) {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      } else {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\r\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\r\nimport \"mdbreact/dist/css/mdb.css\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nimport registerServiceWorker from \"./registerServiceWorker\";\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}